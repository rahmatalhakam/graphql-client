// <auto-generated/>
#nullable enable

namespace Demo.Graphql
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodosResult : global::System.IEquatable<GetTodosResult>, IGetTodosResult
    {
        public GetTodosResult(global::System.Collections.Generic.IReadOnlyList<global::Demo.Graphql.IGetTodos_Todos?>? todos)
        {
            Todos = todos;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Demo.Graphql.IGetTodos_Todos?>? Todos { get; }

        public virtual global::System.Boolean Equals(GetTodosResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Todos, other.Todos));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTodosResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Todos != null)
                {
                    foreach (var Todos_elm in Todos)
                    {
                        if (Todos_elm != null)
                        {
                            hash ^= 397 * Todos_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodos_Todos_Todo : global::System.IEquatable<GetTodos_Todos_Todo>, IGetTodos_Todos_Todo
    {
        public GetTodos_Todos_Todo(global::System.Int32 id, global::System.String? task, global::System.Boolean completed, global::System.DateTimeOffset? created_At)
        {
            Id = id;
            Task = task;
            Completed = completed;
            Created_At = created_At;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Task { get; }

        public global::System.Boolean Completed { get; }

        public global::System.DateTimeOffset? Created_At { get; }

        public virtual global::System.Boolean Equals(GetTodos_Todos_Todo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Task is null && other.Task is null) || Task != null && Task.Equals(other.Task)) && Completed == other.Completed && ((Created_At is null && other.Created_At is null) || Created_At != null && Created_At.Equals(other.Created_At));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTodos_Todos_Todo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Task != null)
                {
                    hash ^= 397 * Task.GetHashCode();
                }

                hash ^= 397 * Completed.GetHashCode();
                if (Created_At != null)
                {
                    hash ^= 397 * Created_At.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetTodosResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Demo.Graphql.IGetTodos_Todos?>? Todos { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetTodos_Todos
    {
        public global::System.Int32 Id { get; }

        public global::System.String? Task { get; }

        public global::System.Boolean Completed { get; }

        public global::System.DateTimeOffset? Created_At { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetTodos_Todos_Todo : IGetTodos_Todos
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodoResult : global::System.IEquatable<AddTodoResult>, IAddTodoResult
    {
        public AddTodoResult(global::Demo.Graphql.IAddTodo_AddTodo? addTodo)
        {
            AddTodo = addTodo;
        }

        public global::Demo.Graphql.IAddTodo_AddTodo? AddTodo { get; }

        public virtual global::System.Boolean Equals(AddTodoResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddTodo is null && other.AddTodo is null) || AddTodo != null && AddTodo.Equals(other.AddTodo)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddTodoResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddTodo != null)
                {
                    hash ^= 397 * AddTodo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodo_AddTodo_AddTodoPayload : global::System.IEquatable<AddTodo_AddTodo_AddTodoPayload>, IAddTodo_AddTodo_AddTodoPayload
    {
        public AddTodo_AddTodo_AddTodoPayload(global::Demo.Graphql.IAddTodo_AddTodo_Todo? todo)
        {
            Todo = todo;
        }

        public global::Demo.Graphql.IAddTodo_AddTodo_Todo? Todo { get; }

        public virtual global::System.Boolean Equals(AddTodo_AddTodo_AddTodoPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Todo is null && other.Todo is null) || Todo != null && Todo.Equals(other.Todo)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddTodo_AddTodo_AddTodoPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Todo != null)
                {
                    hash ^= 397 * Todo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodo_AddTodo_Todo_Todo : global::System.IEquatable<AddTodo_AddTodo_Todo_Todo>, IAddTodo_AddTodo_Todo_Todo
    {
        public AddTodo_AddTodo_Todo_Todo(global::System.String? task, global::System.Int32 id)
        {
            Task = task;
            Id = id;
        }

        public global::System.String? Task { get; }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(AddTodo_AddTodo_Todo_Todo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Task is null && other.Task is null) || Task != null && Task.Equals(other.Task))) && Id == other.Id;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddTodo_AddTodo_Todo_Todo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Task != null)
                {
                    hash ^= 397 * Task.GetHashCode();
                }

                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IAddTodoResult
    {
        public global::Demo.Graphql.IAddTodo_AddTodo? AddTodo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IAddTodo_AddTodo
    {
        public global::Demo.Graphql.IAddTodo_AddTodo_Todo? Todo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IAddTodo_AddTodo_AddTodoPayload : IAddTodo_AddTodo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IAddTodo_AddTodo_Todo
    {
        public global::System.String? Task { get; }

        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IAddTodo_AddTodo_Todo_Todo : IAddTodo_AddTodo_Todo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeleteTodoResult : global::System.IEquatable<DeleteTodoResult>, IDeleteTodoResult
    {
        public DeleteTodoResult(global::Demo.Graphql.IDeleteTodo_DeleteTodo? deleteTodo)
        {
            DeleteTodo = deleteTodo;
        }

        public global::Demo.Graphql.IDeleteTodo_DeleteTodo? DeleteTodo { get; }

        public virtual global::System.Boolean Equals(DeleteTodoResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DeleteTodo is null && other.DeleteTodo is null) || DeleteTodo != null && DeleteTodo.Equals(other.DeleteTodo)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteTodoResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DeleteTodo != null)
                {
                    hash ^= 397 * DeleteTodo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeleteTodo_DeleteTodo_AddTodoPayload : global::System.IEquatable<DeleteTodo_DeleteTodo_AddTodoPayload>, IDeleteTodo_DeleteTodo_AddTodoPayload
    {
        public DeleteTodo_DeleteTodo_AddTodoPayload(global::Demo.Graphql.IDeleteTodo_DeleteTodo_Todo? todo)
        {
            Todo = todo;
        }

        public global::Demo.Graphql.IDeleteTodo_DeleteTodo_Todo? Todo { get; }

        public virtual global::System.Boolean Equals(DeleteTodo_DeleteTodo_AddTodoPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Todo is null && other.Todo is null) || Todo != null && Todo.Equals(other.Todo)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteTodo_DeleteTodo_AddTodoPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Todo != null)
                {
                    hash ^= 397 * Todo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeleteTodo_DeleteTodo_Todo_Todo : global::System.IEquatable<DeleteTodo_DeleteTodo_Todo_Todo>, IDeleteTodo_DeleteTodo_Todo_Todo
    {
        public DeleteTodo_DeleteTodo_Todo_Todo(global::System.Int32 id, global::System.String? task, global::System.Boolean completed, global::System.DateTimeOffset? created_At)
        {
            Id = id;
            Task = task;
            Completed = completed;
            Created_At = created_At;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Task { get; }

        public global::System.Boolean Completed { get; }

        public global::System.DateTimeOffset? Created_At { get; }

        public virtual global::System.Boolean Equals(DeleteTodo_DeleteTodo_Todo_Todo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Task is null && other.Task is null) || Task != null && Task.Equals(other.Task)) && Completed == other.Completed && ((Created_At is null && other.Created_At is null) || Created_At != null && Created_At.Equals(other.Created_At));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteTodo_DeleteTodo_Todo_Todo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Task != null)
                {
                    hash ^= 397 * Task.GetHashCode();
                }

                hash ^= 397 * Completed.GetHashCode();
                if (Created_At != null)
                {
                    hash ^= 397 * Created_At.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDeleteTodoResult
    {
        public global::Demo.Graphql.IDeleteTodo_DeleteTodo? DeleteTodo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDeleteTodo_DeleteTodo
    {
        public global::Demo.Graphql.IDeleteTodo_DeleteTodo_Todo? Todo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDeleteTodo_DeleteTodo_AddTodoPayload : IDeleteTodo_DeleteTodo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDeleteTodo_DeleteTodo_Todo
    {
        public global::System.Int32 Id { get; }

        public global::System.String? Task { get; }

        public global::System.Boolean Completed { get; }

        public global::System.DateTimeOffset? Created_At { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDeleteTodo_DeleteTodo_Todo_Todo : IDeleteTodo_DeleteTodo_Todo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UpdateTodoResult : global::System.IEquatable<UpdateTodoResult>, IUpdateTodoResult
    {
        public UpdateTodoResult(global::Demo.Graphql.IUpdateTodo_UpdateTodo? updateTodo)
        {
            UpdateTodo = updateTodo;
        }

        public global::Demo.Graphql.IUpdateTodo_UpdateTodo? UpdateTodo { get; }

        public virtual global::System.Boolean Equals(UpdateTodoResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UpdateTodo is null && other.UpdateTodo is null) || UpdateTodo != null && UpdateTodo.Equals(other.UpdateTodo)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateTodoResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UpdateTodo != null)
                {
                    hash ^= 397 * UpdateTodo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UpdateTodo_UpdateTodo_AddTodoPayload : global::System.IEquatable<UpdateTodo_UpdateTodo_AddTodoPayload>, IUpdateTodo_UpdateTodo_AddTodoPayload
    {
        public UpdateTodo_UpdateTodo_AddTodoPayload(global::Demo.Graphql.IUpdateTodo_UpdateTodo_Todo? todo)
        {
            Todo = todo;
        }

        public global::Demo.Graphql.IUpdateTodo_UpdateTodo_Todo? Todo { get; }

        public virtual global::System.Boolean Equals(UpdateTodo_UpdateTodo_AddTodoPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Todo is null && other.Todo is null) || Todo != null && Todo.Equals(other.Todo)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateTodo_UpdateTodo_AddTodoPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Todo != null)
                {
                    hash ^= 397 * Todo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UpdateTodo_UpdateTodo_Todo_Todo : global::System.IEquatable<UpdateTodo_UpdateTodo_Todo_Todo>, IUpdateTodo_UpdateTodo_Todo_Todo
    {
        public UpdateTodo_UpdateTodo_Todo_Todo(global::System.String? task, global::System.Int32 id)
        {
            Task = task;
            Id = id;
        }

        public global::System.String? Task { get; }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(UpdateTodo_UpdateTodo_Todo_Todo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Task is null && other.Task is null) || Task != null && Task.Equals(other.Task))) && Id == other.Id;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateTodo_UpdateTodo_Todo_Todo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Task != null)
                {
                    hash ^= 397 * Task.GetHashCode();
                }

                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IUpdateTodoResult
    {
        public global::Demo.Graphql.IUpdateTodo_UpdateTodo? UpdateTodo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IUpdateTodo_UpdateTodo
    {
        public global::Demo.Graphql.IUpdateTodo_UpdateTodo_Todo? Todo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IUpdateTodo_UpdateTodo_AddTodoPayload : IUpdateTodo_UpdateTodo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IUpdateTodo_UpdateTodo_Todo
    {
        public global::System.String? Task { get; }

        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IUpdateTodo_UpdateTodo_Todo_Todo : IUpdateTodo_UpdateTodo_Todo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodoByIdResult : global::System.IEquatable<GetTodoByIdResult>, IGetTodoByIdResult
    {
        public GetTodoByIdResult(global::System.Collections.Generic.IReadOnlyList<global::Demo.Graphql.IGetTodoById_TodoById?>? todoById)
        {
            TodoById = todoById;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Demo.Graphql.IGetTodoById_TodoById?>? TodoById { get; }

        public virtual global::System.Boolean Equals(GetTodoByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(TodoById, other.TodoById));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTodoByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (TodoById != null)
                {
                    foreach (var TodoById_elm in TodoById)
                    {
                        if (TodoById_elm != null)
                        {
                            hash ^= 397 * TodoById_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodoById_TodoById_Todo : global::System.IEquatable<GetTodoById_TodoById_Todo>, IGetTodoById_TodoById_Todo
    {
        public GetTodoById_TodoById_Todo(global::System.Int32 id, global::System.String? task, global::System.Boolean completed, global::System.DateTimeOffset? created_At)
        {
            Id = id;
            Task = task;
            Completed = completed;
            Created_At = created_At;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Task { get; }

        public global::System.Boolean Completed { get; }

        public global::System.DateTimeOffset? Created_At { get; }

        public virtual global::System.Boolean Equals(GetTodoById_TodoById_Todo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Task is null && other.Task is null) || Task != null && Task.Equals(other.Task)) && Completed == other.Completed && ((Created_At is null && other.Created_At is null) || Created_At != null && Created_At.Equals(other.Created_At));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTodoById_TodoById_Todo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Task != null)
                {
                    hash ^= 397 * Task.GetHashCode();
                }

                hash ^= 397 * Completed.GetHashCode();
                if (Created_At != null)
                {
                    hash ^= 397 * Created_At.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetTodoByIdResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Demo.Graphql.IGetTodoById_TodoById?>? TodoById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetTodoById_TodoById
    {
        public global::System.Int32 Id { get; }

        public global::System.String? Task { get; }

        public global::System.Boolean Completed { get; }

        public global::System.DateTimeOffset? Created_At { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetTodoById_TodoById_Todo : IGetTodoById_TodoById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodoInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "AddTodoInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Demo.Graphql.AddTodoInput;
            var inputInfo = runtimeValue as global::Demo.Graphql.State.IAddTodoInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsTaskSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("task", FormatTask(input.Task)));
            }

            if (inputInfo.IsCompletedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("completed", FormatCompleted(input.Completed)));
            }

            return fields;
        }

        private global::System.Object? FormatTask(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCompleted(global::System.Boolean input)
        {
            return _booleanFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodoInput : global::Demo.Graphql.State.IAddTodoInputInfo, global::System.IEquatable<AddTodoInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddTodoInput)obj);
        }

        public virtual global::System.Boolean Equals(AddTodoInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Task is null && other.Task is null) || Task != null && Task.Equals(other.Task))) && Completed == other.Completed;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Task != null)
                {
                    hash ^= 397 * Task.GetHashCode();
                }

                hash ^= 397 * Completed.GetHashCode();
                return hash;
            }
        }

        private global::System.String? _value_task;
        private global::System.Boolean _set_task;
        private global::System.Boolean _value_completed;
        private global::System.Boolean _set_completed;
        public global::System.String? Task
        {
            get => _value_task;
            set
            {
                _set_task = true;
                _value_task = value;
            }
        }

        global::System.Boolean global::Demo.Graphql.State.IAddTodoInputInfo.IsTaskSet => _set_task;
        public global::System.Boolean Completed
        {
            get => _value_completed;
            set
            {
                _set_completed = true;
                _value_completed = value;
            }
        }

        global::System.Boolean global::Demo.Graphql.State.IAddTodoInputInfo.IsCompletedSet => _set_completed;
    }

    /// <summary>
    /// Represents the operation service of the GetTodos GraphQL operation
    /// <code>
    /// query GetTodos {
    ///   todos {
    ///     __typename
    ///     id
    ///     task
    ///     completed
    ///     created_At
    ///     ... on Todo {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodosQueryDocument : global::StrawberryShake.IDocument
    {
        private GetTodosQueryDocument()
        {
        }

        public static GetTodosQueryDocument Instance { get; } = new GetTodosQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x6f, 0x73, 0x20, 0x7b, 0x20, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x6f, 0x64, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "72e662b401f3cdb903d43f1b8b0e5707");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTodos GraphQL operation
    /// <code>
    /// query GetTodos {
    ///   todos {
    ///     __typename
    ///     id
    ///     task
    ///     completed
    ///     created_At
    ///     ... on Todo {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodosQuery : global::Demo.Graphql.IGetTodosQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTodosResult> _operationExecutor;
        public GetTodosQuery(global::StrawberryShake.IOperationExecutor<IGetTodosResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTodosResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTodosResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTodosResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetTodosQueryDocument.Instance.Hash.Value, name: "GetTodos", document: GetTodosQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTodos GraphQL operation
    /// <code>
    /// query GetTodos {
    ///   todos {
    ///     __typename
    ///     id
    ///     task
    ///     completed
    ///     created_At
    ///     ... on Todo {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetTodosQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTodosResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTodosResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddTodo GraphQL operation
    /// <code>
    /// mutation AddTodo($todo: AddTodoInput) {
    ///   addTodo(input: $todo) {
    ///     __typename
    ///     todo {
    ///       __typename
    ///       task
    ///       id
    ///       ... on Todo {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodoMutationDocument : global::StrawberryShake.IDocument
    {
        private AddTodoMutationDocument()
        {
        }

        public static AddTodoMutationDocument Instance { get; } = new AddTodoMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x64, 0x6f, 0x28, 0x24, 0x74, 0x6f, 0x64, 0x6f, 0x3a, 0x20, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x54, 0x6f, 0x64, 0x6f, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x74, 0x6f, 0x64, 0x6f, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x6f, 0x64, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "363c8c06bbf251fd0ed170d4127a388e");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddTodo GraphQL operation
    /// <code>
    /// mutation AddTodo($todo: AddTodoInput) {
    ///   addTodo(input: $todo) {
    ///     __typename
    ///     todo {
    ///       __typename
    ///       task
    ///       id
    ///       ... on Todo {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodoMutation : global::Demo.Graphql.IAddTodoMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddTodoResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addTodoInputFormatter;
        public AddTodoMutation(global::StrawberryShake.IOperationExecutor<IAddTodoResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addTodoInputFormatter = serializerResolver.GetInputValueFormatter("AddTodoInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddTodoResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddTodoResult>> ExecuteAsync(global::Demo.Graphql.AddTodoInput? todo, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(todo);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddTodoResult>> Watch(global::Demo.Graphql.AddTodoInput? todo, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(todo);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Demo.Graphql.AddTodoInput? todo)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("todo", FormatTodo(todo));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddTodoMutationDocument.Instance.Hash.Value, name: "AddTodo", document: AddTodoMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatTodo(global::Demo.Graphql.AddTodoInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _addTodoInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddTodo GraphQL operation
    /// <code>
    /// mutation AddTodo($todo: AddTodoInput) {
    ///   addTodo(input: $todo) {
    ///     __typename
    ///     todo {
    ///       __typename
    ///       task
    ///       id
    ///       ... on Todo {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IAddTodoMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddTodoResult>> ExecuteAsync(global::Demo.Graphql.AddTodoInput? todo, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddTodoResult>> Watch(global::Demo.Graphql.AddTodoInput? todo, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteTodo GraphQL operation
    /// <code>
    /// mutation DeleteTodo($id: Int!) {
    ///   deleteTodo(id: $id) {
    ///     __typename
    ///     todo {
    ///       __typename
    ///       id
    ///       task
    ///       completed
    ///       created_At
    ///       ... on Todo {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeleteTodoMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteTodoMutationDocument()
        {
        }

        public static DeleteTodoMutationDocument Instance { get; } = new DeleteTodoMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x6f, 0x64, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9c73348474e8b714902b86683c4ee0cf");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteTodo GraphQL operation
    /// <code>
    /// mutation DeleteTodo($id: Int!) {
    ///   deleteTodo(id: $id) {
    ///     __typename
    ///     todo {
    ///       __typename
    ///       id
    ///       task
    ///       completed
    ///       created_At
    ///       ... on Todo {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeleteTodoMutation : global::Demo.Graphql.IDeleteTodoMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteTodoResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DeleteTodoMutation(global::StrawberryShake.IOperationExecutor<IDeleteTodoResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteTodoResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteTodoResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteTodoResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteTodoMutationDocument.Instance.Hash.Value, name: "DeleteTodo", document: DeleteTodoMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteTodo GraphQL operation
    /// <code>
    /// mutation DeleteTodo($id: Int!) {
    ///   deleteTodo(id: $id) {
    ///     __typename
    ///     todo {
    ///       __typename
    ///       id
    ///       task
    ///       completed
    ///       created_At
    ///       ... on Todo {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDeleteTodoMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteTodoResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteTodoResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateTodo GraphQL operation
    /// <code>
    /// mutation UpdateTodo($id: Int!, $input: AddTodoInput) {
    ///   updateTodo(id: $id, input: $input) {
    ///     __typename
    ///     todo {
    ///       __typename
    ///       task
    ///       id
    ///       ... on Todo {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UpdateTodoMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateTodoMutationDocument()
        {
        }

        public static UpdateTodoMutationDocument Instance { get; } = new UpdateTodoMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x6f, 0x64, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7bac689c5f3487f3b24f25acd4057da9");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateTodo GraphQL operation
    /// <code>
    /// mutation UpdateTodo($id: Int!, $input: AddTodoInput) {
    ///   updateTodo(id: $id, input: $input) {
    ///     __typename
    ///     todo {
    ///       __typename
    ///       task
    ///       id
    ///       ... on Todo {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UpdateTodoMutation : global::Demo.Graphql.IUpdateTodoMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateTodoResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addTodoInputFormatter;
        public UpdateTodoMutation(global::StrawberryShake.IOperationExecutor<IUpdateTodoResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _addTodoInputFormatter = serializerResolver.GetInputValueFormatter("AddTodoInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateTodoResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateTodoResult>> ExecuteAsync(global::System.Int32 id, global::Demo.Graphql.AddTodoInput? input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id, input);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateTodoResult>> Watch(global::System.Int32 id, global::Demo.Graphql.AddTodoInput? input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id, input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id, global::Demo.Graphql.AddTodoInput? input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateTodoMutationDocument.Instance.Hash.Value, name: "UpdateTodo", document: UpdateTodoMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatInput(global::Demo.Graphql.AddTodoInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _addTodoInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateTodo GraphQL operation
    /// <code>
    /// mutation UpdateTodo($id: Int!, $input: AddTodoInput) {
    ///   updateTodo(id: $id, input: $input) {
    ///     __typename
    ///     todo {
    ///       __typename
    ///       task
    ///       id
    ///       ... on Todo {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IUpdateTodoMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateTodoResult>> ExecuteAsync(global::System.Int32 id, global::Demo.Graphql.AddTodoInput? input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateTodoResult>> Watch(global::System.Int32 id, global::Demo.Graphql.AddTodoInput? input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetTodoById GraphQL operation
    /// <code>
    /// query GetTodoById($id: Int!) {
    ///   todoById(id: $id) {
    ///     __typename
    ///     id
    ///     task
    ///     completed
    ///     created_At
    ///     ... on Todo {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodoByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetTodoByIdQueryDocument()
        {
        }

        public static GetTodoByIdQueryDocument Instance { get; } = new GetTodoByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x74, 0x6f, 0x64, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x6f, 0x64, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "bca57a525072a9833ad69486c718fa64");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTodoById GraphQL operation
    /// <code>
    /// query GetTodoById($id: Int!) {
    ///   todoById(id: $id) {
    ///     __typename
    ///     id
    ///     task
    ///     completed
    ///     created_At
    ///     ... on Todo {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodoByIdQuery : global::Demo.Graphql.IGetTodoByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTodoByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetTodoByIdQuery(global::StrawberryShake.IOperationExecutor<IGetTodoByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTodoByIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTodoByIdResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTodoByIdResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetTodoByIdQueryDocument.Instance.Hash.Value, name: "GetTodoById", document: GetTodoByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetTodoById GraphQL operation
    /// <code>
    /// query GetTodoById($id: Int!) {
    ///   todoById(id: $id) {
    ///     __typename
    ///     id
    ///     task
    ///     completed
    ///     created_At
    ///     ... on Todo {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetTodoByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTodoByIdResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTodoByIdResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the Latihan1Client GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class Latihan1Client : global::Demo.Graphql.ILatihan1Client
    {
        private readonly global::Demo.Graphql.IGetTodosQuery _getTodos;
        private readonly global::Demo.Graphql.IAddTodoMutation _addTodo;
        private readonly global::Demo.Graphql.IDeleteTodoMutation _deleteTodo;
        private readonly global::Demo.Graphql.IUpdateTodoMutation _updateTodo;
        private readonly global::Demo.Graphql.IGetTodoByIdQuery _getTodoById;
        public Latihan1Client(global::Demo.Graphql.IGetTodosQuery getTodos, global::Demo.Graphql.IAddTodoMutation addTodo, global::Demo.Graphql.IDeleteTodoMutation deleteTodo, global::Demo.Graphql.IUpdateTodoMutation updateTodo, global::Demo.Graphql.IGetTodoByIdQuery getTodoById)
        {
            _getTodos = getTodos ?? throw new global::System.ArgumentNullException(nameof(getTodos));
            _addTodo = addTodo ?? throw new global::System.ArgumentNullException(nameof(addTodo));
            _deleteTodo = deleteTodo ?? throw new global::System.ArgumentNullException(nameof(deleteTodo));
            _updateTodo = updateTodo ?? throw new global::System.ArgumentNullException(nameof(updateTodo));
            _getTodoById = getTodoById ?? throw new global::System.ArgumentNullException(nameof(getTodoById));
        }

        public static global::System.String ClientName => "Latihan1Client";
        public global::Demo.Graphql.IGetTodosQuery GetTodos => _getTodos;
        public global::Demo.Graphql.IAddTodoMutation AddTodo => _addTodo;
        public global::Demo.Graphql.IDeleteTodoMutation DeleteTodo => _deleteTodo;
        public global::Demo.Graphql.IUpdateTodoMutation UpdateTodo => _updateTodo;
        public global::Demo.Graphql.IGetTodoByIdQuery GetTodoById => _getTodoById;
    }

    /// <summary>
    /// Represents the Latihan1Client GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ILatihan1Client
    {
        global::Demo.Graphql.IGetTodosQuery GetTodos { get; }

        global::Demo.Graphql.IAddTodoMutation AddTodo { get; }

        global::Demo.Graphql.IDeleteTodoMutation DeleteTodo { get; }

        global::Demo.Graphql.IUpdateTodoMutation UpdateTodo { get; }

        global::Demo.Graphql.IGetTodoByIdQuery GetTodoById { get; }
    }
}

namespace Demo.Graphql.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TodoEntity
    {
        public TodoEntity(global::System.Int32 id = default !, global::System.String? task = default !, global::System.Boolean completed = default !, global::System.DateTimeOffset? created_At = default !)
        {
            Id = id;
            Task = task;
            Completed = completed;
            Created_At = created_At;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Task { get; }

        public global::System.Boolean Completed { get; }

        public global::System.DateTimeOffset? Created_At { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodosResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.GetTodosResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, GetTodos_Todos_Todo> _getTodos_Todos_TodoFromTodoEntityMapper;
        public GetTodosResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, GetTodos_Todos_Todo> getTodos_Todos_TodoFromTodoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getTodos_Todos_TodoFromTodoEntityMapper = getTodos_Todos_TodoFromTodoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getTodos_Todos_TodoFromTodoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Demo.Graphql.IGetTodosResult);
        public GetTodosResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetTodosResultInfo info)
            {
                return new GetTodosResult(MapIGetTodos_TodosArray(info.Todos, snapshot));
            }

            throw new global::System.ArgumentException("GetTodosResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.Graphql.IGetTodos_Todos?>? MapIGetTodos_TodosArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var todos = new global::System.Collections.Generic.List<global::Demo.Graphql.IGetTodos_Todos?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                todos.Add(MapIGetTodos_Todos(child, snapshot));
            }

            return todos;
        }

        private global::Demo.Graphql.IGetTodos_Todos? MapIGetTodos_Todos(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Todo", global::System.StringComparison.Ordinal))
            {
                return _getTodos_Todos_TodoFromTodoEntityMapper.Map(snapshot.GetEntity<global::Demo.Graphql.State.TodoEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodosResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetTodosResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? todos, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Todos = todos;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Todos { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTodosResultInfo(Todos, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodos_Todos_TodoFromTodoEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, GetTodos_Todos_Todo>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetTodos_Todos_TodoFromTodoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetTodos_Todos_Todo Map(global::Demo.Graphql.State.TodoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetTodos_Todos_Todo(entity.Id, entity.Task, entity.Completed, entity.Created_At);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodoResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.AddTodoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, AddTodo_AddTodo_Todo_Todo> _addTodo_AddTodo_Todo_TodoFromTodoEntityMapper;
        public AddTodoResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, AddTodo_AddTodo_Todo_Todo> addTodo_AddTodo_Todo_TodoFromTodoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addTodo_AddTodo_Todo_TodoFromTodoEntityMapper = addTodo_AddTodo_Todo_TodoFromTodoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addTodo_AddTodo_Todo_TodoFromTodoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Demo.Graphql.IAddTodoResult);
        public AddTodoResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddTodoResultInfo info)
            {
                return new AddTodoResult(MapIAddTodo_AddTodo(info.AddTodo, snapshot));
            }

            throw new global::System.ArgumentException("AddTodoResultInfo expected.");
        }

        private global::Demo.Graphql.IAddTodo_AddTodo? MapIAddTodo_AddTodo(global::Demo.Graphql.State.AddTodoPayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddTodo_AddTodo returnValue = default !;
            if (data?.__typename.Equals("AddTodoPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddTodo_AddTodo_AddTodoPayload(MapIAddTodo_AddTodo_Todo(data.Todo, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Demo.Graphql.IAddTodo_AddTodo_Todo? MapIAddTodo_AddTodo_Todo(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Todo", global::System.StringComparison.Ordinal))
            {
                return _addTodo_AddTodo_Todo_TodoFromTodoEntityMapper.Map(snapshot.GetEntity<global::Demo.Graphql.State.TodoEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodoResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddTodoResultInfo(global::Demo.Graphql.State.AddTodoPayloadData? addTodo, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddTodo = addTodo;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Demo.Graphql.State.AddTodoPayloadData? AddTodo { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddTodoResultInfo(AddTodo, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodo_AddTodo_Todo_TodoFromTodoEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, AddTodo_AddTodo_Todo_Todo>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddTodo_AddTodo_Todo_TodoFromTodoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddTodo_AddTodo_Todo_Todo Map(global::Demo.Graphql.State.TodoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddTodo_AddTodo_Todo_Todo(entity.Task, entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeleteTodoResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.DeleteTodoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, DeleteTodo_DeleteTodo_Todo_Todo> _deleteTodo_DeleteTodo_Todo_TodoFromTodoEntityMapper;
        public DeleteTodoResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, DeleteTodo_DeleteTodo_Todo_Todo> deleteTodo_DeleteTodo_Todo_TodoFromTodoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deleteTodo_DeleteTodo_Todo_TodoFromTodoEntityMapper = deleteTodo_DeleteTodo_Todo_TodoFromTodoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deleteTodo_DeleteTodo_Todo_TodoFromTodoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Demo.Graphql.IDeleteTodoResult);
        public DeleteTodoResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteTodoResultInfo info)
            {
                return new DeleteTodoResult(MapIDeleteTodo_DeleteTodo(info.DeleteTodo, snapshot));
            }

            throw new global::System.ArgumentException("DeleteTodoResultInfo expected.");
        }

        private global::Demo.Graphql.IDeleteTodo_DeleteTodo? MapIDeleteTodo_DeleteTodo(global::Demo.Graphql.State.AddTodoPayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IDeleteTodo_DeleteTodo returnValue = default !;
            if (data?.__typename.Equals("AddTodoPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new DeleteTodo_DeleteTodo_AddTodoPayload(MapIDeleteTodo_DeleteTodo_Todo(data.Todo, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Demo.Graphql.IDeleteTodo_DeleteTodo_Todo? MapIDeleteTodo_DeleteTodo_Todo(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Todo", global::System.StringComparison.Ordinal))
            {
                return _deleteTodo_DeleteTodo_Todo_TodoFromTodoEntityMapper.Map(snapshot.GetEntity<global::Demo.Graphql.State.TodoEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeleteTodoResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteTodoResultInfo(global::Demo.Graphql.State.AddTodoPayloadData? deleteTodo, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteTodo = deleteTodo;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Demo.Graphql.State.AddTodoPayloadData? DeleteTodo { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteTodoResultInfo(DeleteTodo, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeleteTodo_DeleteTodo_Todo_TodoFromTodoEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, DeleteTodo_DeleteTodo_Todo_Todo>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteTodo_DeleteTodo_Todo_TodoFromTodoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public DeleteTodo_DeleteTodo_Todo_Todo Map(global::Demo.Graphql.State.TodoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeleteTodo_DeleteTodo_Todo_Todo(entity.Id, entity.Task, entity.Completed, entity.Created_At);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UpdateTodoResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.UpdateTodoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, UpdateTodo_UpdateTodo_Todo_Todo> _updateTodo_UpdateTodo_Todo_TodoFromTodoEntityMapper;
        public UpdateTodoResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, UpdateTodo_UpdateTodo_Todo_Todo> updateTodo_UpdateTodo_Todo_TodoFromTodoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _updateTodo_UpdateTodo_Todo_TodoFromTodoEntityMapper = updateTodo_UpdateTodo_Todo_TodoFromTodoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(updateTodo_UpdateTodo_Todo_TodoFromTodoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Demo.Graphql.IUpdateTodoResult);
        public UpdateTodoResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateTodoResultInfo info)
            {
                return new UpdateTodoResult(MapIUpdateTodo_UpdateTodo(info.UpdateTodo, snapshot));
            }

            throw new global::System.ArgumentException("UpdateTodoResultInfo expected.");
        }

        private global::Demo.Graphql.IUpdateTodo_UpdateTodo? MapIUpdateTodo_UpdateTodo(global::Demo.Graphql.State.AddTodoPayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUpdateTodo_UpdateTodo returnValue = default !;
            if (data?.__typename.Equals("AddTodoPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UpdateTodo_UpdateTodo_AddTodoPayload(MapIUpdateTodo_UpdateTodo_Todo(data.Todo, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Demo.Graphql.IUpdateTodo_UpdateTodo_Todo? MapIUpdateTodo_UpdateTodo_Todo(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Todo", global::System.StringComparison.Ordinal))
            {
                return _updateTodo_UpdateTodo_Todo_TodoFromTodoEntityMapper.Map(snapshot.GetEntity<global::Demo.Graphql.State.TodoEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UpdateTodoResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateTodoResultInfo(global::Demo.Graphql.State.AddTodoPayloadData? updateTodo, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateTodo = updateTodo;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Demo.Graphql.State.AddTodoPayloadData? UpdateTodo { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateTodoResultInfo(UpdateTodo, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UpdateTodo_UpdateTodo_Todo_TodoFromTodoEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, UpdateTodo_UpdateTodo_Todo_Todo>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateTodo_UpdateTodo_Todo_TodoFromTodoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public UpdateTodo_UpdateTodo_Todo_Todo Map(global::Demo.Graphql.State.TodoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new UpdateTodo_UpdateTodo_Todo_Todo(entity.Task, entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodoByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.GetTodoByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, GetTodoById_TodoById_Todo> _getTodoById_TodoById_TodoFromTodoEntityMapper;
        public GetTodoByIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, GetTodoById_TodoById_Todo> getTodoById_TodoById_TodoFromTodoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getTodoById_TodoById_TodoFromTodoEntityMapper = getTodoById_TodoById_TodoFromTodoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getTodoById_TodoById_TodoFromTodoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Demo.Graphql.IGetTodoByIdResult);
        public GetTodoByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetTodoByIdResultInfo info)
            {
                return new GetTodoByIdResult(MapIGetTodoById_TodoByIdArray(info.TodoById, snapshot));
            }

            throw new global::System.ArgumentException("GetTodoByIdResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.Graphql.IGetTodoById_TodoById?>? MapIGetTodoById_TodoByIdArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var todos = new global::System.Collections.Generic.List<global::Demo.Graphql.IGetTodoById_TodoById?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                todos.Add(MapIGetTodoById_TodoById(child, snapshot));
            }

            return todos;
        }

        private global::Demo.Graphql.IGetTodoById_TodoById? MapIGetTodoById_TodoById(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Todo", global::System.StringComparison.Ordinal))
            {
                return _getTodoById_TodoById_TodoFromTodoEntityMapper.Map(snapshot.GetEntity<global::Demo.Graphql.State.TodoEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodoByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetTodoByIdResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? todoById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            TodoById = todoById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? TodoById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTodoByIdResultInfo(TodoById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodoById_TodoById_TodoFromTodoEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, GetTodoById_TodoById_Todo>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetTodoById_TodoById_TodoFromTodoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetTodoById_TodoById_Todo Map(global::Demo.Graphql.State.TodoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetTodoById_TodoById_Todo(entity.Id, entity.Task, entity.Completed, entity.Created_At);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    internal interface IAddTodoInputInfo
    {
        global::System.Boolean IsTaskSet { get; }

        global::System.Boolean IsCompletedSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodosBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IGetTodosResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IGetTodosResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetTodosBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IGetTodosResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetTodosResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetTodosResult Result, GetTodosResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetTodosResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetTodosResult, GetTodosResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? todosId = default !;
            _entityStore.Update(session =>
            {
                todosId = UpdateIGetTodos_TodosEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "todos"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetTodosResultInfo(todosId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetTodos_TodosEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var todos = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                todos.Add(UpdateIGetTodos_TodosEntity(session, child, entityIds));
            }

            return todos;
        }

        private global::StrawberryShake.EntityId? UpdateIGetTodos_TodosEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Todo", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.Graphql.State.TodoEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.Graphql.State.TodoEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completed")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.Graphql.State.TodoEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completed")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodoBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IAddTodoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IAddTodoResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public AddTodoBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IAddTodoResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddTodoResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddTodoResult Result, AddTodoResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddTodoResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddTodoResult, AddTodoResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Demo.Graphql.State.AddTodoPayloadData? addTodoId = default !;
            _entityStore.Update(session =>
            {
                addTodoId = DeserializeIAddTodo_AddTodo(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addTodo"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddTodoResultInfo(addTodoId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Demo.Graphql.State.AddTodoPayloadData? DeserializeIAddTodo_AddTodo(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddTodoPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Demo.Graphql.State.AddTodoPayloadData(typename, todo: UpdateIAddTodo_AddTodo_TodoEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "todo"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIAddTodo_AddTodo_TodoEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Todo", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.Graphql.State.TodoEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.Graphql.State.TodoEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), entity.Completed, entity.Created_At));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.Graphql.State.TodoEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeleteTodoBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IDeleteTodoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IDeleteTodoResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public DeleteTodoBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IDeleteTodoResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteTodoResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteTodoResult Result, DeleteTodoResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDeleteTodoResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteTodoResult, DeleteTodoResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Demo.Graphql.State.AddTodoPayloadData? deleteTodoId = default !;
            _entityStore.Update(session =>
            {
                deleteTodoId = DeserializeIDeleteTodo_DeleteTodo(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteTodo"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteTodoResultInfo(deleteTodoId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Demo.Graphql.State.AddTodoPayloadData? DeserializeIDeleteTodo_DeleteTodo(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddTodoPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Demo.Graphql.State.AddTodoPayloadData(typename, todo: UpdateIDeleteTodo_DeleteTodo_TodoEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "todo"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeleteTodo_DeleteTodo_TodoEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Todo", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.Graphql.State.TodoEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.Graphql.State.TodoEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completed")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.Graphql.State.TodoEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completed")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UpdateTodoBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IUpdateTodoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IUpdateTodoResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public UpdateTodoBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IUpdateTodoResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpdateTodoResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpdateTodoResult Result, UpdateTodoResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IUpdateTodoResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpdateTodoResult, UpdateTodoResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Demo.Graphql.State.AddTodoPayloadData? updateTodoId = default !;
            _entityStore.Update(session =>
            {
                updateTodoId = DeserializeIUpdateTodo_UpdateTodo(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateTodo"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpdateTodoResultInfo(updateTodoId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Demo.Graphql.State.AddTodoPayloadData? DeserializeIUpdateTodo_UpdateTodo(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddTodoPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Demo.Graphql.State.AddTodoPayloadData(typename, todo: UpdateIUpdateTodo_UpdateTodo_TodoEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "todo"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIUpdateTodo_UpdateTodo_TodoEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Todo", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.Graphql.State.TodoEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.Graphql.State.TodoEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), entity.Completed, entity.Created_At));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.Graphql.State.TodoEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetTodoByIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IGetTodoByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IGetTodoByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetTodoByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IGetTodoByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetTodoByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetTodoByIdResult Result, GetTodoByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetTodoByIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetTodoByIdResult, GetTodoByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? todoByIdId = default !;
            _entityStore.Update(session =>
            {
                todoByIdId = UpdateIGetTodoById_TodoByIdEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "todoById"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetTodoByIdResultInfo(todoByIdId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetTodoById_TodoByIdEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var todos = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                todos.Add(UpdateIGetTodoById_TodoByIdEntity(session, child, entityIds));
            }

            return todos;
        }

        private global::StrawberryShake.EntityId? UpdateIGetTodoById_TodoByIdEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Todo", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.Graphql.State.TodoEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.Graphql.State.TodoEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completed")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.Graphql.State.TodoEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completed")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddTodoPayloadData
    {
        public AddTodoPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? todo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Todo = todo;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? Todo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class Latihan1ClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Todo" => ParseTodoEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Todo" => FormatTodoEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseTodoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatTodoEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class Latihan1ClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public Latihan1ClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public static partial class Latihan1ClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Demo.Graphql.State.Latihan1ClientStoreAccessor> AddLatihan1Client(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Demo.Graphql.State.Latihan1ClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.GetTodosQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.AddTodoMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.DeleteTodoMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.UpdateTodoMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.GetTodoByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.Latihan1Client>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.ILatihan1Client>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Demo.Graphql.State.Latihan1ClientStoreAccessor>("Latihan1Client", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("Latihan1Client"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, global::Demo.Graphql.GetTodos_Todos_Todo>, global::Demo.Graphql.State.GetTodos_Todos_TodoFromTodoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, global::Demo.Graphql.AddTodo_AddTodo_Todo_Todo>, global::Demo.Graphql.State.AddTodo_AddTodo_Todo_TodoFromTodoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, global::Demo.Graphql.DeleteTodo_DeleteTodo_Todo_Todo>, global::Demo.Graphql.State.DeleteTodo_DeleteTodo_Todo_TodoFromTodoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, global::Demo.Graphql.UpdateTodo_UpdateTodo_Todo_Todo>, global::Demo.Graphql.State.UpdateTodo_UpdateTodo_Todo_TodoFromTodoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.Graphql.State.TodoEntity, global::Demo.Graphql.GetTodoById_TodoById_Todo>, global::Demo.Graphql.State.GetTodoById_TodoById_TodoFromTodoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Demo.Graphql.AddTodoInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IGetTodosResult>, global::Demo.Graphql.State.GetTodosResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IGetTodosResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.IGetTodosQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IGetTodosResult>, global::Demo.Graphql.State.GetTodosBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Demo.Graphql.IGetTodosResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IGetTodosResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IGetTodosResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.GetTodosQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.IGetTodosQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.GetTodosQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IAddTodoResult>, global::Demo.Graphql.State.AddTodoResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IAddTodoResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.IAddTodoMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IAddTodoResult>, global::Demo.Graphql.State.AddTodoBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Demo.Graphql.IAddTodoResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IAddTodoResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IAddTodoResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.AddTodoMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.IAddTodoMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.AddTodoMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IDeleteTodoResult>, global::Demo.Graphql.State.DeleteTodoResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IDeleteTodoResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.IDeleteTodoMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IDeleteTodoResult>, global::Demo.Graphql.State.DeleteTodoBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Demo.Graphql.IDeleteTodoResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IDeleteTodoResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IDeleteTodoResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.DeleteTodoMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.IDeleteTodoMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.DeleteTodoMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IUpdateTodoResult>, global::Demo.Graphql.State.UpdateTodoResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IUpdateTodoResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.IUpdateTodoMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IUpdateTodoResult>, global::Demo.Graphql.State.UpdateTodoBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Demo.Graphql.IUpdateTodoResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IUpdateTodoResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IUpdateTodoResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.UpdateTodoMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.IUpdateTodoMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.UpdateTodoMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IGetTodoByIdResult>, global::Demo.Graphql.State.GetTodoByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Demo.Graphql.IGetTodoByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.IGetTodoByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IGetTodoByIdResult>, global::Demo.Graphql.State.GetTodoByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Demo.Graphql.IGetTodoByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IGetTodoByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.Graphql.IGetTodoByIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.GetTodoByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.IGetTodoByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.GetTodoByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Demo.Graphql.State.Latihan1ClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.Latihan1Client>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.Graphql.ILatihan1Client>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.Graphql.Latihan1Client>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
